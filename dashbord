<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Financial Health Dashboard | Board Presentation</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js"></script>
    
    <style>
        /* Custom Tailwind Configuration (Optional but good practice for color consistency) */
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'primary-blue': '#1e3a8a', /* Dark Blue for professional look */
                        'positive-green': '#10b981',
                        'negative-red': '#ef4444',
                        'neutral-gray': '#6b7280',
                        'accent-orange': '#f97316',
                    }
                }
            }
        }
        /* Custom style for the Waterfall chart's connector lines - a common add-on */
        .chart-container {
            position: relative;
        }
    </style>
</head>

<body class="bg-gray-50 font-sans p-4 md:p-8">

    <header class="mb-8 border-b pb-4">
        <h1 class="text-3xl font-bold text-primary-blue">Financial Health Dashboard</h1>
        <p class="text-lg text-neutral-gray">YTD Performance & Membership Health | Through March/May 2025</p>
    </header>

    <section id="kpi-scorecard" class="mb-12">
        <h2 class="text-xl font-semibold text-primary-blue mb-4">Key Financial & Operational Metrics (YTD)</h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-6">

            <div class="bg-white p-6 rounded-lg shadow-xl border-l-4 border-primary-blue">
                <p class="text-sm font-medium text-neutral-gray uppercase">Total YTD Revenue</p>
                <p class="text-3xl font-extrabold text-gray-900 mt-1">$189,359</p>
                <div class="text-sm mt-2 text-neutral-gray">
                    <span class="font-semibold">3 Months Actual</span>
                </div>
            </div>

            <div class="bg-white p-6 rounded-lg shadow-xl border-l-4 border-negative-red">
                <p class="text-sm font-medium text-neutral-gray uppercase">YTD Net Income (Actual)</p>
                <p class="text-3xl font-extrabold text-gray-900 mt-1">$53,978</p>
                <div class="text-sm mt-2">
                    <p class="text-negative-red font-bold">
                        <span class="inline-block transform rotate-90 mr-1">&#x25BC;</span>
                        -$62,156 (Variance)
                    </p>
                </div>
            </div>
            
            <div class="bg-white p-6 rounded-lg shadow-xl border-l-4 border-gray-400 hidden lg:block">
                <p class="text-sm font-medium text-neutral-gray uppercase">YTD Net Income (Budget)</p>
                <p class="text-3xl font-extrabold text-gray-900 mt-1">$116,134</p>
                <div class="text-sm mt-2 text-neutral-gray">
                    <span class="font-semibold">Budget Target</span>
                </div>
            </div>

            <div class="bg-white p-6 rounded-lg shadow-xl border-l-4 border-positive-green">
                <p class="text-sm font-medium text-neutral-gray uppercase">PAC Bank Balance</p>
                <p class="text-3xl font-extrabold text-gray-900 mt-1">$3,903</p>
                <div class="text-sm mt-2 text-neutral-gray">
                    <span class="font-semibold">Current Balance</span>
                </div>
            </div>

            <div class="bg-white p-6 rounded-lg shadow-xl border-l-4 border-accent-orange">
                <p class="text-sm font-medium text-neutral-gray uppercase">Total Units Represented</p>
                <p class="text-3xl font-extrabold text-gray-900 mt-1">34,858</p>
                <div class="text-sm mt-2 text-neutral-gray">
                    <span class="font-semibold">As of May 2025</span>
                </div>
            </div>

        </div>
    </section>

    <section id="charts" class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        
        <div class="lg:col-span-2 bg-white p-6 rounded-lg shadow-xl chart-container">
            <h2 class="text-xl font-semibold text-primary-blue mb-4">Budget Variance (Net Income)</h2>
            <p class="text-sm text-neutral-gray mb-4">Visualizing the flow from Budget to Actual Net Income (Variance: -<span class="font-bold text-negative-red">$62,156</span>)</p>
            <canvas id="budgetVarianceChart" class="h-96 w-full"></canvas>
        </div>

        <div class="lg:col-span-1 bg-white p-6 rounded-lg shadow-xl">
            <h2 class="text-xl font-semibold text-primary-blue mb-4">Membership Composition</h2>
            <p class="text-sm text-neutral-gray mb-4">Distribution of Member Categories (May 2025)</p>
            <div class="flex justify-center items-center h-full">
                <canvas id="membershipChart" class="h-96 w-full"></canvas>
            </div>
        </div>

    </section>

    <script>
        // Data Setup
        const varianceData = {
            budget: 116134,
            actual: 53978,
            variance: -62156
        };

        const membershipData = {
            properties: 255,
            owner: 140,
            supplier: 107
        };

        // --- 2. Budget Variance Waterfall Chart ---
        const setupWaterfallChart = () => {
            const ctx = document.getElementById('budgetVarianceChart').getContext('2d');
            
            // Waterfall chart is created using a stacked bar chart
            // Base dataset (invisible) is used to lift the variance bar
            const baseData = [
                0, // Budget: No base
                varianceData.actual, // Variance: Base is Actual Net Income
                0  // Actual: No base
            ];

            // Visible datasets
            const totalData = [
                varianceData.budget, // Budget: Full value
                0, // Variance: Value is in the Change dataset
                varianceData.actual // Actual: Full value
            ];

            const changeData = [
                0, // Budget: No change
                varianceData.variance, // Variance: The difference
                0  // Actual: No change
            ];

            const waterfallChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Budget Net Income', 'Variance', 'Actual Net Income'],
                    datasets: [
                        {
                            label: 'Base',
                            data: baseData,
                            backgroundColor: 'rgba(0, 0, 0, 0)', // Invisible
                            borderColor: 'rgba(0, 0, 0, 0)',
                            stack: 'Stack 0',
                            barThickness: 50,
                        },
                        {
                            label: 'Total (Budget/Actual)',
                            data: totalData,
                            backgroundColor: ['#1e3a8a', 'rgba(0,0,0,0)', '#10b981'], // Primary Blue for Start, Transparent for Change, Positive Green for End
                            stack: 'Stack 0',
                            barThickness: 50,
                        },
                        {
                            label: 'Variance Change',
                            data: changeData,
                            backgroundColor: ['rgba(0,0,0,0)', '#ef4444', 'rgba(0,0,0,0)'], // Transparent, Negative Red for Variance, Transparent
                            stack: 'Stack 0',
                            barThickness: 50,
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: false
                        },
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed.y);
                                    }
                                    return label;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            stacked: true,
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            stacked: true,
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', maximumFractionDigits: 0 }).format(value);
                                }
                            }
                        }
                    }
                }
            });
        };

        // --- 3. Membership Composition Donut Chart ---
        const setupMembershipChart = () => {
            const ctx = document.getElementById('membershipChart').getContext('2d');
            const totalMembers = membershipData.properties + membershipData.owner + membershipData.supplier;

            const membershipChart = new Chart(ctx, {
                type: 'doughnut',
                plugins: [ChartDataLabels],
                data: {
                    labels: ['Properties', 'Owner/Management', 'Supplier Partners'],
                    datasets: [{
                        data: [membershipData.properties, membershipData.owner, membershipData.supplier],
                        backgroundColor: ['#1e3a8a', '#f97316', '#10b981'], // Primary Blue, Accent Orange, Positive Green
                        hoverOffset: 16,
                        borderWidth: 4,
                        borderColor: '#ffffff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '65%',
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const value = context.parsed;
                                    const percentage = ((value / totalMembers) * 100).toFixed(1);
                                    return `${context.label}: ${value} (${percentage}%)`;
                                }
                            }
                        },
                        datalabels: {
                            formatter: (value, context) => {
                                const percentage = ((value / totalMembers) * 100).toFixed(0);
                                return `${percentage}%`;
                            },
                            color: '#ffffff',
                            font: {
                                weight: 'bold',
                                size: 14
                            },
                            anchor: 'center'
                        }
                    }
                }
            });
        };

        // Initialize Charts on page load
        document.addEventListener('DOMContentLoaded', () => {
            setupWaterfallChart();
            setupMembershipChart();
        });
    </script>
</body>
</html>
